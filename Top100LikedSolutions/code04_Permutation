class Solution {
    
    public void backtrack(int[] nums, List<List<Integer>> answer, List<Integer> currentPermutations, boolean[] used){
       if(currentPermutations.size() == nums.length){
           answer.add(new ArrayList<>(currentPermutations));
           return;
       }
       for(int i = 0; i < nums.length; i++){
            if(!used[i]){
                currentPermutations.add(nums[i]);
                used[i] = true;
                
                backtrack(nums,answer,currentPermutations,used);
                currentPermutations.remove(currentPermutations.size() - 1);
                used[i] = false;
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> answer = new ArrayList<>();
        List<Integer> currentPermutations = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        backtrack(nums, answer, currentPermutations, used);
        return answer;
    }
}