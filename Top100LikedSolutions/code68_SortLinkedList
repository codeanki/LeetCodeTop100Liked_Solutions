class Solution {
    public static ListNode MiddleLL(ListNode head){
        ListNode slowPointer = head, fastPointer = head.next;
        while(fastPointer != null && fastPointer.next != null){
            slowPointer = slowPointer.next;
            fastPointer = fastPointer.next.next;
        }
        return slowPointer;
    }

    public static ListNode merge(ListNode head1, ListNode head2){
        if(head1 == null){
            return head2;
        }
        if(head2 == null){
            return head1;
        }
        ListNode t1 = head1, t2 = head2, head = null, tail = null;
        if(t1.val <= t2.val){
            head = t1;
            tail = t1;
            t1 = t1.next;
        }else{
            head = t2;
            tail = t2;
            t2 = t2.next;
        }
        while(t1 != null && t2 != null){
            if(t1.val <= t2.val){
                tail.next = t1;
                tail = t1;
                t1 = t1.next;
            }else{
                tail.next = t2;
                tail = t2;
                t2 = t2.next;
            }
        }
        if(t1 != null){
            tail.next = t1;
        }
        if(t2 != null){
            tail.next = t2;
        }
        return head;
    }
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode mid = MiddleLL(head);
        ListNode head2 = mid.next;
        mid.next = null;
        ListNode list1 = sortList(head);
        ListNode list2 = sortList(head2);
        ListNode sortedList = merge(list1, list2);
        return sortedList;
    }
}