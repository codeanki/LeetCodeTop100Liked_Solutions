class Solution {
    private ListNode merge(ListNode head1, ListNode head2){
        if(head1 == null){
            return head2;
        }
        if(head2 == null){
            return head1;
        }
        ListNode t1 = head1, t2 = head2, head = null, tail = null;
        if(t1.val <= t2.val){
            head = t1;
            tail = t1;
            t1 = t1.next;
        }else{
            head = t2;
            tail = t2;
            t2 = t2.next;
        }
        while(t1 != null && t2 != null){
            if(t1.val <= t2.val){
                tail.next = t1;
                tail = t1;
                t1 = t1.next;
            }else{
                tail.next = t2;
                tail = t2;
                t2 = t2.next;
            }
        }
        if(t1 != null){
            tail.next = t1;
        }
        if(t2 != null){
            tail.next = t2;
        }

        return head;
    }
    private ListNode mergeLists(ListNode[] lists, int start, int end){
        if(start == end){
            return lists[start];
        }
        if(start + 1 == end){
            return merge(lists[start], lists[end]);
        }
        int mid = start + (end - start)/2;
        ListNode left = mergeLists(lists, start, mid);
        ListNode right = mergeLists(lists, mid + 1, end);
        return merge(left, right);
    }
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        return mergeLists(lists, 0, lists.length - 1);
    }
}