class Solution {
    private List<String> constructBoard(char[][] board){
       List<String> answer = new ArrayList<>();
       for(char[] row : board){
           answer.add(new String(row));
       }
       return answer;
    }

    private boolean isValid(char[][] board, int row, int col){
        for(int i =0; i < row; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--,j--){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j=col + 1; i >= 0 && j < board.length; i--,j++){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }

    private void helper(char[][] board, int row, List<List<String>> answer){
        if(row == board.length){
            answer.add(constructBoard(board));
            return;
        }
        for(int col = 0; col < board.length; col++){
            if(isValid(board, row, col)){
                board[row][col] = 'Q';
                helper(board, row + 1, answer);
                board[row][col] = '.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> answer = new ArrayList<>();
        char[][] board = new char[n][n];
        for(char[] row : board){
            Arrays.fill(row, '.');
        }
        helper(board, 0, answer);
        return answer;
    }
}