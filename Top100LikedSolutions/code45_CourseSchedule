class Solution {

    public boolean dfs(Map<Integer, List<Integer>> graph, int[] visited, int course){
        if(visited[course] == 1){
            return false;
        }
        if(visited[course] == 2){
            return true;
        }
        visited[course] = 1;
        if(graph.containsKey(course)){
            for(int prerequisite : graph.get(course)){
                if(!dfs(graph, visited, prerequisite)){
                    return false;
                }
            }
        }
        visited[course] = 2;
        return true;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for(int[] prerequisite : prerequisites){
            int course = prerequisite[0];
            int prerequisiteCourse = prerequisite[1];
            graph.computeIfAbsent(course, k -> new ArrayList<>()).add(prerequisiteCourse);
        }
        int[] visited = new int[numCourses];

        for(int i = 0; i < numCourses; i++){
          if(visited[i] == 0 && !dfs(graph, visited,i)){
              return false;
          }
        }
        return true;
    }
}