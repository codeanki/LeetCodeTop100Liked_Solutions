class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k <= 0){
            return new int[0];
        }
        Map<Integer, Integer> mp = new HashMap<>();
        for(int num : nums){
            mp.put(num, mp.getOrDefault(num,0) + 1);
        }
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(Comparator.comparingInt(mp::get));
        for(int num : mp.keySet()){
           minHeap.offer(num);
           if(minHeap.size() > k){
               minHeap.poll();
           }
        }
        int[] answer = new int[k];
        for(int i = k-1; i>=0; i--){
            answer[i] = minHeap.poll();
        }
        return answer;
    }
}